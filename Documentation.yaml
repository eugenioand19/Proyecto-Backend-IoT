openapi: 3.0.0
info:
  title: Monitoreo de Usuarios y Humedales API
  version: 1.0.0
  description: API para la gestión de usuarios y monitoreo de humedales
servers:
  - url: "https://proyecto-backend-iot.vercel.app"
    description: "Servidor de prueba"
tags:
  - name: Users
    description: Operaciones relacionadas con usuarios
  - name: Wetlands
    description: Operaciones relacionadas con humedales
  - name: Nodes
    description: Operaciones relacionadas con los nodos en el sistema de monitoreo
  - name: Sensors
    description: Operaciones relacionadas con los sensores en el sistema de monitoreo
  - name: Roles
    description: Operaciones relacionadas con los Roles del sistema
  - name: Permissions
    description: Operaciones relacionadas con los Permisos del sistema
  - name: Alerts
    description: Alertas de Humedales


paths:
  /api/users:
    get:
      tags:
        - Users
      summary: Obtener lista de usuarios
      parameters:
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: text_search
          in: query
          schema:
            type: string
          description: Texto de búsqueda (name, last_name, email)

        - name: sort_property
          in: query
          schema:
            type: string
            enum: [created_at, name, last_name, email, role]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: statusList
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Estados separados por coma ej. active,inactive . sin [ ]
        - name: RoleList
          in: query
          schema:
            type: string
            enum: [admin,user]
          description: Roles separados por coma, los roles se obtienes de la ruta /api/role-select ej. admin,user. sin [ ]
        
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              
    post:
      tags:
        - Users
      summary: Crear un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
      responses:
        '201':
          description: Usuario creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{user_id}:
    get:
      tags:
        - Users
      summary: Obtener usuario por ID
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        '200':
          description: Usuario obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithUserObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Users
      summary: Actualizar usuario
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema_U'
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Users
      summary: Eliminar usuario
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID del usuario
      responses:
        '204':
          description: Usuario eliminado

  /api/wetlands:
    get:
      tags:
        - Wetlands
      summary: Obtener lista de humedales
      parameters:
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: text_search
          in: query
          schema:
            type: string
          description: Texto de búsqueda (name, location)
        - name: sort_property
          in: query
          schema:
            type: string
            enum: [created_at, status, name, location]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: statusList
          in: query
          schema:
            type: string
          description: Lista separada por comas de estados de humedales
      responses:
        '200':
          description: Lista de humedales obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithWetlandData'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Wetlands
      summary: Crear un nuevo humedal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WetlandPost'
      responses:
        '201':
          description: Humedal creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/wetlands/{wetland_id}:
    get:
      tags:
        - Wetlands
      summary: Obtener humedal por ID
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del humedal
      responses:
        '200':
          description: Humedal obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithWetlandObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Wetlands
      summary: Actualizar humedal
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del humedal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WetlandPost'
      responses:
        '200':
          description: Humedal actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Wetlands
      summary: Eliminar humedal
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del humedal
      responses:
        '204':
          description: Humedal eliminado
    
      
  /api/wetlands-overview:
    get:
      tags:
        - Wetlands
      summary: Obtener informacion de los sensores de cada uno de los humedales
      responses:
        '200':
          description: Lista de nodos obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseData'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/wetlands-overview/{wetland_id}:
    get:
      tags:
        - Wetlands
      summary: Obtener informacion de los sensores de cada uno de los humedales con sus nodos 
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
            description: ID del humedal
      responses:
        '200':
          description: Lista de nodos obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseData_Wt'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/wetland-select:
    get:
      tags:
        - Wetlands
      summary: Obtener lista Humedales
      description: Devuelve una lista de humedales. Puede realizar una búsqueda de texto.
      parameters:
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar humedales por nombre o descripcion.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del humedal
                        wetland_id:
                          type: integer
                          description: ID del humedal
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/wetland-report:
    get:
      tags:
        - Wetlands
      summary: Get a rerport from sensors of wetlands
      parameters:
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: sort_property
          in: query
          schema:
            type: string
            enum: ["register_date","node_name","wetland_name","data_history_value","sensor_name"]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: sensor_type
          in: query
          schema:
            type: string
            enum: [PH,OD,TEMP,TURB,CAUD_EN,CAUD_SAL,HUM]
          description: Tipos de sensores
        - name: start_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha inicial en formato Unix
        - name: end_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha final en formato Unix
      description: Fetches sensor data, including the node, sensor, and wetland information.
      responses:
        '200':
          description: Successful response with sensor data
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ReportResponse'
        '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
            description: Error de servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /api/wetland-report/{wetland_id}:
    get:
      tags:
        - Wetlands
      summary: Get a rerport from sensors of a specific wetland
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del humedal
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: sort_property
          in: query
          schema:
            type: string
            enum: ["register_date","node_name","wetland_name","data_history_value","sensor_name"]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: sensor_type
          in: query
          schema:
            type: string
            enum: [PH,OD,TEMP,TURB,CAUD_EN,CAUD_SAL,HUM]
          description: Tipos de sensores
        - name: start_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha inicial en formato Unix
        - name: end_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha final en formato Unix
      description: Fetches sensor data, including the node, sensor, and wetland information.
      responses:
        '200':
          description: Successful response with sensor data
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ReportResponse'
        '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
            description: Error de servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  /api/wetland-report/{wetland_id}/{node_id}:
    get:
      tags:
        - Wetlands
      summary: Get a rerport from sensors of a specific wetland in a specific node
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
        - name: node_id
          in: path
          required: true
          schema:
            type: integer

          description: ID del humedal
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: sort_property
          in: query
          schema:
            type: string
            enum: ["register_date","node_name","wetland_name","data_history_value","sensor_name"]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: sensor_type
          in: query
          schema:
            type: string
            enum: [PH,OD,TEMP,TURB,CAUD_EN,CAUD_SAL,HUM]
          description: Tipos de sensores
        - name: start_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha inicial en formato Unix
        - name: end_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha final en formato Unix
      description: Fetches sensor data, including the node, sensor, and wetland information.
      responses:
        '200':
          description: Successful response with sensor data
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ReportResponse'
        '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
            description: Error de servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
  /api/wetland-report/{wetland_id}/{node_id}/{sensor_id}:
    get:
      tags:
        - Wetlands
      summary: Get a rerport from sensors of a specific wetland in a specific node and specific sensor
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer

          description: ID del humedal
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: sort_property
          in: query
          schema:
            type: string
            enum: ["register_date","node_name","wetland_name","data_history_value","sensor_name"]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: sensor_type
          in: query
          schema:
            type: string
            enum: [PH,OD,TEMP,TURB,CAUD_EN,CAUD_SAL,HUM]
          description: Tipos de sensores
        - name: start_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha inicial en formato Unix
        - name: end_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha final en formato Unix
      description: Fetches sensor data, including the node, sensor, and wetland information.
      responses:
        '200':
          description: Successful response with sensor data
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/ReportResponse'
        '404':
            description: Not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '400':
            description: Bad request
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '500':
            description: Error de servidor
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  /api/nodes:
    get:
      tags:
        - Nodes
      summary: Obtener lista de nodos
      parameters:
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
          description: Número de la página
        - name: text_search
          in: query
          schema:
            type: string
          description: Consulta de búsqueda de texto (str_MAC,location,name)
        - name: sort_property
          in: query
          schema:
            type: string
            enum: [created_at, last_connection, installation_date, status, str_MAC, location, wetland_id]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: statusList
          in: query
          schema:
            type: string
          description: Lista de estados, separados por comas
        - name: TypeList
          in: query
          schema:
            type: string
          description: Lista de tipos de nodo, separados por comas
      responses:
        '200':
          description: Lista de nodos obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithNodeData'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Nodes
      summary: Crear un nuevo nodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodePost'
      responses:
        '201':
          description: Nodo creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/nodes/{node_id}:
    get:
      tags:
        - Nodes
      summary: Obtener nodo por ID
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del nodo
      responses:
        '200':
          description: Nodo obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithNodeObject'
    put:
      tags:
        - Nodes
      summary: Actualizar nodo
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del nodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodePost'
      responses:
        '200':
          description: Nodo actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Nodes
      summary: Eliminar nodo
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del nodo
      responses:
        '204':
          description: Nodo eliminado
  /api/nodes/{node_id}/update_sensors:
    post:
      tags:
        - Nodes
      summary: Asignar sensores a un nodo
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del nodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorsListSchema'
      responses:
        '200':
          description: Actualizan correcta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/node-select:
    get:
      tags:
        - Nodes
      summary: Obtener nodos
      description: Devuelve una lista de nodos. Puede filtrar por `wetland_id` o realizar una búsqueda de texto.
      parameters:
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar nodos por nombre o ubicación.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del nodo
                        node_id:
                          type: integer
                          description: ID del nodo
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: No encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/node-select/{wetland_id}:
    get:
      tags:
        - Nodes
      summary: Obtener nodos por ID de humedal
      description: Devuelve una lista de nodos filtrada por `wetland_id`.
      parameters:
        - name: wetland_id
          in: path
          required: true
          schema:
            type: integer
            description: ID del humedal.
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar nodos por nombre o ubicación.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del nodo
                        node_id:
                          type: integer
                          description: ID del nodo
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: No encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sensors:
    get:
      tags:
        - Sensors
      summary: Obtener lista de sensores
      parameters:
        - name: page_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Tamaño de la página
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Número de la página
        - name: text_search
          in: query
          schema:
            type: string
          description: Consulta de búsqueda de texto (name)
        - name: sort_property
          in: query
          schema:
            type: string
            enum: [created_at, name]
          description: Propiedad para ordenar
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: statusList
          in: query
          schema:
            type: string
          description: Lista separada por comas de estados de sensores
        - name: typesList
          in: query
          schema:
            type: string
          description: Lista separada por comas de tipos de sensores
      responses:
        '200':
          description: Lista de sensores obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithSensorList'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Sensors
      summary: Crear un nuevo sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorPost'
      responses:
        '201':
          description: Sensor creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sensors/{sensor_id}:
    get:
      tags:
        - Sensors
      summary: Obtener sensor por ID
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del sensor
      responses:
        '200':
          description: Sensor obtenido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithSensorObject'
    put:
      tags:
        - Sensors
      summary: Actualizar sensor
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del sensor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorPost'
      responses:
        '200':
          description: Sensor actualizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Sensors
      summary: Eliminar sensor
      parameters:
        - name: sensor_id
          in: path
          required: true
          schema:
            type: integer
          description: ID del sensor
      responses:
        '204':
          description: Sensor eliminado
  /api/sensor-select:
    get:
      tags:
        - Sensors
      summary: Obtener sensores
      description: Devuelve una lista de sensores. Puede filtrar por `wetland_id` o realizar una búsqueda de texto.
      parameters:
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar sensores por nombre o ubicación.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del sensor
                        sensor_id:
                          type: integer
                          description: ID del sensor
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: No encontrado (Error de recurso no encontrado)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    description: Array vacío cuando no se encuentran datos.
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje indicando que no hay datos disponibles
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/sensor-select/{node_id}:
    get:
      tags:
        - Sensors
      summary: Obtener sensores por ID de Nodo
      description: Devuelve una lista de sensores filtrada por `node_id`.
      parameters:
        - name: node_id
          in: path
          required: true
          schema:
            type: integer
            description: ID del Nodo.
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar sensores por nombre o ubicación.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del sensor
                        sensor_id:
                          type: integer
                          description: ID del sensor
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: No encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/roles:
    get:
      tags:
        - Roles
      summary: Obtener todos los roles con paginación
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
          description: Tamaño de página
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Número de página
        - in: query
          name: text_search
          schema:
            type: string
          description: Texto de búsqueda (name, decription)
        - in: query
          name: sort_property
          schema:
            type: string
            enum: [created_at, name, description]
          description: Propiedad para ordenar
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
      responses:
        '200':
          description: Lista de roles obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithRoleData'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Roles
      summary: Crear un nuevo rol
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePost'
      responses:
        '201':
          description: Rol creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/roles/{id}:
    get:
      tags:
        - Roles
      summary: Obtener un rol específico por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del rol
      responses:
        '200':
          description: Rol obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithRoleObject'
    put:
      tags:
        - Roles
      summary: Actualizar un rol existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del rol
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePost'
      responses:
        '200':
          description: Rol actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Roles
      summary: Eliminar un rol específico
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del rol
      responses:
        '204':
          description: Rol eliminado exitosamente

  /api/roles/{role_id}/update_permissions:
    post:
      tags:
        - Roles
      summary: Asignar permisos a un rol
      parameters:
        - in: path
          name: role_id
          required: true
          schema:
            type: integer
          description: ID del rol
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionListSchema'
      responses:
        '200':
          description: Permisos asignados exitosamente al rol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/role-select:
    get:
      tags:
        - Roles
      summary: Obtener roles
      description: Devuelve una lista de roles disponibles.
      parameters:
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar Roles por nombre

      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del rol
                        role_id:
                          type: integer
                          description: ID del rol
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: No encontrado (Error de recurso no encontrado)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                    description: Array vacío cuando no se encuentran datos.
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje indicando que no hay datos disponibles
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/permissions:
    get:
      tags:
        - Permissions
      summary: Obtener todos los permisos con paginación
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
          description: Tamaño de página
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Número de página
        - in: query
          name: text_search
          schema:
            type: string
          description: Texto de búsqueda(name,description)
        - in: query
          name: sort_property
          schema:
            type: string
            enum: [created_at, name, description]
          description: Propiedad para ordenar
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
      responses:
        '200':
          description: Lista de permisos obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithpermissionList'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Permissions
      summary: Crear un nuevo permiso
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionPost'
      responses:
        '201':
          description: Permiso creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/permissions/{id}:
    get:
      tags:
        - Permissions
      summary: Obtener un permiso específico por ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del permiso
      responses:
        '200':
          description: Permiso obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithPermissionObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Permissions
      summary: Actualizar un permiso existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del permiso
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionPost'
      responses:
        '200':
          description: Permisos asignados exitosamente al rol
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Permissions
      summary: Eliminar un permiso específico
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID del permiso
      responses:
        '204':
          description: Permiso eliminado exitosamente

  /api/permissions-select:
    get:
      tags:
        - Permissions
      summary: Obtener Permisos
      description: Devuelve una lista de permisos. Puede realizar una búsqueda de texto.
      parameters:
        - name: text_search
          in: query
          required: false
          schema:
            type: string
          description: Texto de búsqueda para filtrar permisos por nombre o descripcion.
      responses:
        '200':
          description: Éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Nombre del permiso
                        permission_id:
                          type: integer
                          description: ID del permiso
                  errors:
                    $ref: '#/components/schemas/Errors'
                  message:
                    type: string
                    description: Mensaje de operación realizada
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/alerts:
    get:
      tags:
        - Alerts
      summary: Obtener todas las alarmas
      parameters:
        - in: query
          name: page_size
          required: true
          schema:
            type: integer
          description: Tamaño de página
        - in: query
          name: page
          required: true
          schema:
            type: integer
          description: Número de página
        - in: query
          name: text_search
          schema:
            type: string
          description: Texto de búsqueda(name,description)
        - in: query
          name: sort_property
          schema:
            type: string
            enum: [created_at, name, description]
          description: Propiedad para ordenar
        - in: query
          name: sort_order
          schema:
            type: string
            enum: [ASC, DESC]
          description: Orden de clasificación
        - name: start_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha inicial en formato Unix
        - name: end_time
          in: query
          schema:
            type: integer
            minimum: 1
          description: Fecha final en formato Unix
        - name: statusList
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Estados separados por coma ej. active,atendida . sin [ ]
        - name: severityList
          in: query
          schema:
            type: string
            enum: [admin,user]
          description: Roles separados por coma ej. critica, alerta. sin [ ]
      responses:
        '200':
          description: Lista de alarmas obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseWithAlarmList'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    

  /api/alerts/{id}:
    get:
      tags:
        - Alerts
      summary: Obtener una alarma
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de la alarma
      responses:
        '200':
          description: Alarma obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithAlertObject'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Alerts
      summary: Actualizar una Alerta Existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de la alarma
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alarm'
      responses:
        '200':
          description: Actualizacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWithMessage'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error de servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    User:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: "2024-11-08T14:10:57.036821"
        email:
          type: string
          format: email
          example: "euwdddrer9@gmail.com"
        first_name:
          type: string
          example: "Mona"
        last_name:
          type: string
          example: "Pouros"
        role:
          type: string
          example: Administrador del sistema
        second_last_name:
          type: string
          example: ""
        second_name:
          type: string
          example: ""
        user_id:
          type: string
          format: uuid
          example: "73ff0f25-6374-49b6-a2bf-af18a987c55a"
    UserSchema:
      type: object
      properties:
         email:
          type: string
          format: email
          example: "euwdddrer9@gmail.com"
         first_name:
          type: string
          example: "Mona"
         last_name:
          type: string
          example: "Pouros"
         role_id:
          type: integer
          example: 1
         second_last_name:
          type: string
          example: ""
         second_name:
          type: string
          example: ""
         password:
          type: string
          example: "123"
      required:
        - first_name
        - last_name
        - email
        - password
    UserSchema_U:
      type: object
      properties:
         email:
          type: string
          format: email
          example: "euwdddrer9@gmail.com"
         first_name:
          type: string
          example: "Mona"
         last_name:
          type: string
          example: "Pouros"
         role_id:
          type: integer
          example: 1
         second_last_name:
          type: string
          example: ""
         second_name:
          type: string
          example: ""
      required:
        - first_name
        - last_name
        - email
        - password
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: "Success."

    Paging:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 4
        total_count:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 1

    Response:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'

    ResponseWithUserObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"

    ResponseWithMessage:
      type: object
      properties:
        data:
          type: object
          example: {}
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "La entidad ha sido creado correctamente!"
    Wetland:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: "2024-10-24T15:30:17.936855-05:00"
        latitude:
          type: string
          example: "-21.1075"
        location:
          type: string
          example: "WS"
        longitude:
          type: string
          example: "-7.6789"
        name:
          type: string
          example: "hard drive"
        status:
          type: string
          example: "NORMAL"
        updated_at:
          type: string
          format: date-time
          example: "2024-10-26T16:20:38.228060-05:00"
        wetland_id:
          type: integer
          example: 4
    WetlandPost:
      type: object
      properties:
        latitude:
          type: string
          example: "-21.1075"
        location:
          type: string
          example: "WS"
        longitude:
          type: string
          example: "-7.6789"
        name:
          type: string
          example: "hard drive"
        status:
          type: string
          example: "NORMAL"


    ResponseWithWetlandData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Wetland'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'

    ResponseWithWetlandObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Wetland'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    Node:
      type: object
      properties:
        node_id:
          type: integer
        str_MAC:
          type: string
        wetland_id:
          type: integer
        location:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        last_connection:
          type: string
          format: date-time
        installation_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - str_MAC
        - wetland_id
        - location
        - status
    NodePost:
      type: object
      properties:
        str_MAC:
          type: string
        wetland_id:
          type: integer
        location:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        last_connection:
          type: string
          format: date-time
        installation_date:
          type: string
          format: date-time
      required:
        - str_MAC
        - wetland_id
        - location
        - status
    ResponseWithNodeData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'
    
    ResponseWithNodeObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Node'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    Sensor:
      type: object
      properties:
        sensor_id:
          type: integer
        name:
          type: string
        type_sensor:
          type: string
          enum: [PH, OD, TEMP, TURB, CAUD_EN, CAUD_SAL]
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        purchase_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - type_sensor
        - status
    SensorPost:
      type: object
      properties:
        name:
          type: string
        type_sensor:
          type: string
          enum: [PH, OD, TEMP, TURB, CAUD_EN, CAUD_SAL]
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
        purchase_date:
          type: string
          format: date-time
      required:
        - name
        - type_sensor
        - status
    ResponseWithSensorList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'
    ResponseWithSensorObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Sensor'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    
    SensorSchema:
      type: object
      properties:
        name:
          type: string
        type_sensor:
          type: string
          enum: [PH, OD, TEMP, TURB, CAUD_EN, CAUD_SAL]
        status:
          type: string
          enum: [ACTIVE, INACTIVE]
      required:
        - name
        - type_sensor
        - status
    SensorsListSchema:
      type: object
      properties:
        sensors:
          type: array
          items:
            type: integer
      required:
        - sensors
    schemas:
    Role:
      type: object
      properties:
        role_id:
          type: integer
          description: ID del rol
        name:
          type: string
          maxLength: 100
          description: Nombre del rol
        description:
          type: string
          maxLength: 500
          description: Descripción del rol
        created_at:
          type: string
          format: date-time
          description: Fecha de creación del rol
        updated_at:
          type: string
          format: date-time
          description: Fecha de última actualización del rol
    ResponseWithRoleData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'
    ResponseWithRoleObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Role'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    RolePost:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre del rol
        description:
          type: string
          maxLength: 500
          description: Descripción del rol

    Permission:
      type: object
      properties:
        permission_id:
          type: integer
          description: ID del permiso
        name:
          type: string
          maxLength: 100
          description: Nombre del permiso
        code:
          type: string
          maxLength: 100
          description: Código único del permiso
        description:
          type: string
          maxLength: 100
          description: Descripción del permiso
        created_at:
          type: string
          format: date-time
          description: Fecha de creación del permiso
        updated_at:
          type: string
          format: date-time
          description: Fecha de última actualización del permiso
    PermissionPost:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre del permiso
        code:
          type: string
          maxLength: 100
          description: Código único del permiso
        description:
          type: string
          maxLength: 100
          description: Descripción del permiso
    ResponseWithPermissionObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Permission'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    
    ResponseWithpermissionList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'

    PermissionListSchema:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: integer
            description: Lista de IDs de permisos asociados al rol

    RoleQuerySchema:
      type: object
      properties:
        page_size:
          type: integer
          description: Tamaño de página
          minimum: 1
        page:
          type: integer
          description: Número de página
          minimum: 1
        text_search:
          type: string
          description: Texto de búsqueda (name,description)
        sort_property:
          type: string
          description: Propiedad para ordenar
          enum: [created_at, name, description]
        sort_order:
          type: string
          description: Orden de clasificación
          enum: [ASC, DESC]

    PermissionQuerySchema:
      type: object
      properties:
        page_size:
          type: integer
          description: Tamaño de página
          minimum: 1
        page:
          type: integer
          description: Número de página
          minimum: 1
        text_search:
          type: string
          description: Texto de búsqueda
        sort_property:
          type: string
          description: Propiedad para ordenar
          enum: [created_at, name, description]
        sort_order:
          type: string
          description: Orden de clasificación
          enum: [ASC, DESC]

    PermissionQuerySelectSchema:
      type: object
      properties:
        text_search:
          type: string
          description: Texto de búsqueda
    Sensor_:
      type: object
      properties:
        name:
          type: string
          example: "Oxigeno Disuelto"
        unity:
          type: string
          example: "mg/L"
        value:
          type: number
          format: float
          example: 5001967706629558.0
    Node_:
      type: object
      properties:
        name:
          type: string
          example: "DDS"
        node_id:
          type: integer
          example: 12
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/Sensor_'

    SensorData:
      type: object
      properties:
        last_updated:
          type: string
          format: date-time
          example: "Thu, 31 Oct 2024 16:29:08 GMT"
        location:
          type: string
          example: "WS"
        name:
          type: string
          example: "hard drive"
        sensors:
          type: object
          properties:
            OD:
              $ref: '#/components/schemas/Sensor'
            TEMP:
              $ref: '#/components/schemas/Sensor'
            TURB:
              $ref: '#/components/schemas/Sensor'

        status:
          type: string
          example: "NORMAL"
        wetland_id:
          type: integer
          example: 4

    ResponseData:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SensorData'
        errors:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "Sucess!"
        message:
          type: string
          example: "Operacion Realizada Correctamente"

    SensorData_Wt:
      type: object
      properties:
        last_updated:
          type: string
          format: date-time
          example: "Thu, 31 Oct 2024 16:44:55 GMT"
        location:
          type: string
          example: "RO"
        name:
          type: string
          example: "sensor"
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node_'
        status:
          type: string
          example: "NORMAL"
        wetland_id:
          type: integer
          example: 5

    ResponseData_Wt:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SensorData_Wt'
        errors:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "Sucess!"
        message:
          type: string
          example: "Operacion Realizada Correctamente"
    Errors:
      type: object
      properties:
        code:
          type: integer
          description: Código de estado
        message:
          type: string
          description: Descripción del error
    ErrorResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: Array vacío si no se encuentran datos.
        errors:
          $ref: '#/components/schemas/Errors'
        message:
          type: string
          description: Mensaje de error o de no disponibilidad de datos

    ReportResponse:
      type: object
      properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        node:
                          type: object
                          properties:
                            location:
                              type: string
                              example: interface
                            name:
                              type: string
                              example: V
                        sensor:
                          type: object
                          properties:
                            name:
                              type: string
                              example: violet
                            register_date:
                              type: string
                              format: date-time
                              example: "Wed, 08 May 2024 15:21:11 GMT"
                            type_sensor:
                              type: string
                              example: Humedad
                            unity:
                              type: string
                              example: '%'
                            value:
                              type: number
                              format: float
                              example: 7795295696345423.0
                        wetland:
                          type: object
                          properties:
                            location:
                              type: string
                              example: Plaza la paz
                            name:
                              type: string
                              example: Humedal IUB
                  errors:
                    type: object
                    properties:
                      code:
                        type: integer
                        example: 200
                      message:
                        type: string
                        example: Success.
                  paging:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 2
                      total_count:
                        type: integer
                        example: 2232
                      total_pages:
                        type: integer
                        example: 1116
    Alarm:
      type: object
      properties:
        status:
          type: string
          example: "activa"
        description:
          type: string
          example: Peligro sensor 1 nodo 2

    AlarmQuery:
        type: object
        properties:
          alert_date:
            type: string
            format: date-time
            example: "2024-11-08T14:10:57.036821"
          node:
            type: string
            example: "NODO_LATERAL"
          sensor:
            type: string
            example: "LATERAL_HUMEDAD"
          status:
            type: string
            example: "Pouros"
          description:
            type: string
            example: Peligro sensor 1 nodo 2
          severity:
            type: string
            example: ""
          alert_id:
            type: integer
            example: "1"
    
    ResponseWithAlarmList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AlarmQuery'
        errors:
          $ref: '#/components/schemas/Error'
        paging:
          $ref: '#/components/schemas/Paging'
  
    ResponseWithAlertObject:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AlarmQuery'
        errors:
          $ref: '#/components/schemas/Error'
        message:
          type: string
          example: "Operacion Realizada Correctamente"
